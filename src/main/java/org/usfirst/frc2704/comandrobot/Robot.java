// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2704.comandrobot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2704.comandrobot.commands.*;
import org.usfirst.frc2704.comandrobot.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Drivetrain drivetrain;
    public static BallClaw ballclaw;
    public static Pnematics pnematicControl;
    public static Lift lift;
    public static LineTracker lineFollower;
    public static ServoServo servo;
    private static Camera camera1;
    private static Camera camera2; 
    private static TrackLine lineCommand;   
    private static DriveWithJoystick driveCommand;
    private static BackExtend backExtendCommand;
    private static BackRetract backRetractCommand;
    private static BoxOpen boxExtendCommand;
    private static BoxClose boxRetractCommand;
    private static FrontExtend frontExtendCommand;
    private static FrontRetract frontRetractCommand;
    //private static MoveClawWithJoystick ballClawCommand;
    //private static LiftControls liftCommand;
    //private static ControlHookWithButtons hookCommand;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        drivetrain = new Drivetrain();
        // this code enables streaming to autodashboard.
        //camera = new Camera();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        lift = new Lift();
        ballclaw = new BallClaw();
        pnematicControl = new Pnematics();
        camera1 = new Camera();
        camera2 = new Camera();
        lineFollower = new LineTracker();
        servo = new ServoServo();
        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
        driveCommand = new DriveWithJoystick();
        lineCommand = new TrackLine();
        backExtendCommand = new BackExtend();
        backRetractCommand = new BackRetract();
        boxExtendCommand = new BoxOpen();
        boxRetractCommand = new BoxClose();
        frontExtendCommand = new FrontExtend();
        frontRetractCommand = new FrontRetract();
        //ballClawCommand = new MoveClawWithJoystick();
        //liftCommand = new LiftControls();
        //hookCommand = new ControlHookWithButtons();
        driveCommand.start();
        lineCommand.start();
        backExtendCommand.start();
        backRetractCommand.start();
        boxExtendCommand.start();
        boxRetractCommand.start();
        frontExtendCommand.start();
        frontRetractCommand.start();
        //ballClawCommand.start();
        //liftCommand.start();
        //hookCommand.start();
        
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        driveCommand = new DriveWithJoystick();
        lineCommand = new TrackLine();
        backExtendCommand = new BackExtend();
        backRetractCommand = new BackRetract();
        boxExtendCommand = new BoxOpen();
        boxRetractCommand = new BoxClose();
        frontExtendCommand = new FrontExtend();
        frontRetractCommand = new FrontRetract();
        //ballClawCommand = new MoveClawWithJoystick();
        //liftCommand = new LiftControls();
        //hookCommand = new ControlHookWithButtons();
        driveCommand.start();
        lineCommand.start();
        backExtendCommand.start();
        backRetractCommand.start();
        boxExtendCommand.start();
        boxRetractCommand.start();
        frontExtendCommand.start();
        frontRetractCommand.start();
        //ballClawCommand.start();
        //liftCommand.start();
        //hookCommand.start();
        
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }
}
